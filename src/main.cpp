#include "backends/imgui_impl_opengl3.h"
#include "backends/imgui_impl_sdl2.h"
#include "imgui.h"
#include <IOKit/serial/ioss.h>
#include <SDL.h>
#include <errno.h>
#include <fcntl.h>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <portmidi.h>
#include <porttime.h>
#include <stdio.h>
#include <sys/ioctl.h>
#include <termios.h>
#include <unistd.h>
#if defined(IMGUI_IMPL_OPENGL_ES2)
#include <SDL_opengles2.h>
#else
#include <SDL_opengl.h>
#endif

#define OUTPUT_BUFFER_SIZE 0
#define INPUT_BUFFER_SIZE 10
#define TIME_PROC ((PmTimeProcPtr)Pt_Time)
#define TIME_INFO NULL

unsigned char pianoPatch[] = {
    0xF4, 0x9E, 0x00, 0xA6, 0x00, 0xA7, 0x00, 0xAB, 0x00, 0xAC, 0x00, 0xF1,
    0x80, 0x60, 0x81, 0x20, 0x82, 0x7F, 0x83, 0x00, 0x84, 0x7F, 0x85, 0x60,
    0x86, 0x20, 0x87, 0x60, 0x88, 0x5C, 0x89, 0x4D, 0x8A, 0x00, 0x8B, 0x00,
    0x8F, 0x00, 0x90, 0x60, 0x91, 0x00, 0x92, 0x7F, 0x93, 0x00, 0x94, 0x00,
    0x95, 0x60, 0x96, 0x00, 0x97, 0x44, 0x98, 0x6C, 0x99, 0x00, 0x9A, 0x00,
    0x9B, 0x5D, 0x9C, 0x20, 0x9D, 0x60, 0x9F, 0x60, 0xA0, 0x00, 0xA1, 0x00,
    0xA2, 0x00, 0xA3, 0x50, 0xA4, 0x00, 0xA5, 0x00, 0xA6, 0x00, 0xA7, 0x00,
    0xA8, 0x00, 0xA9, 0x00, 0xAA, 0x29, 0xAB, 0x00, 0xAC, 0x20, 0xAD, 0x20,
    0xAE, 0x00, 0xAF, 0x40, 0xF1, 0xB5, 0x00, 0xF9, 0x80, 0x20, 0x81, 0x60,
    0x82, 0x00, 0x83, 0x00, 0x84, 0x00, 0x85, 0x60, 0x86, 0x20, 0x87, 0x00,
    0x88, 0x76, 0x89, 0x00, 0x8A, 0x00, 0x8B, 0x00, 0x8F, 0x40, 0x90, 0x60,
    0x91, 0x52, 0x92, 0x42, 0x93, 0x7F, 0x94, 0x60, 0x95, 0x60, 0x96, 0x00,
    0x97, 0x2C, 0x98, 0x1B, 0x99, 0x00, 0x9A, 0x14, 0x9B, 0x62, 0x9C, 0x40,
    0x9D, 0x60, 0x9F, 0x20, 0xA0, 0x20, 0xA1, 0x20, 0xA2, 0x00, 0xA3, 0x67,
    0xA4, 0x00, 0xA5, 0x40, 0xA6, 0x30, 0xA7, 0x50, 0xA8, 0x20, 0xA9, 0x00,
    0xAA, 0x4F, 0xAB, 0x00, 0xAC, 0x29, 0xAD, 0x20, 0xAE, 0x7F, 0xAF, 0x40,
    0xF9, 0xB5, 0x00, 0xF1, 0x9E, 0x5C, 0xF9, 0x9E, 0x74, 0xF4, 0xB0, 0x01,
    0xF4, 0xB7, 0x00, 0xF4, 0xB8, 0x00, 0xB9, 0x00, 0xBA, 0x00, 0x8C, 0x00,
    0x8D, 0x00, 0x8E, 0x00, 0xB0, 0x01, 0xF1, 0xB6, 0x7F, 0xF9, 0xB6, 0x7F,
    0xF1, 0xBB, 0x00, 0xF9, 0xBB, 0x00, 0xF1, 0xBD, 0x00, 0xB4, 0x51, 0xBE,
    0x51, 0xF9, 0xBD, 0x00, 0xB4, 0x32, 0xBE, 0x32, 0xF9, 0xB4, 0x32, 0xBE,
    0x32, 0xF1, 0xB4, 0x51, 0xBE, 0x51, 0xF9, 0xB5, 0x00, 0xF1, 0xB5, 0x00,
    0xF5, 0xC0, 0x00, 0xF4, 0x9E, 0x00, 0xA6, 0x00, 0xA7, 0x00, 0xAB, 0x00,
    0xAC, 0x00, 0xF1, 0x80, 0x60, 0x81, 0x20, 0x82, 0x7F, 0x83, 0x00, 0x84,
    0x7F, 0x85, 0x60, 0x86, 0x20, 0x87, 0x60, 0x88, 0x5C, 0x89, 0x4D, 0x8A,
    0x00, 0x8B, 0x00, 0x8F, 0x00, 0x90, 0x60, 0x91, 0x00, 0x92, 0x7F, 0x93,
    0x00, 0x94, 0x00, 0x95, 0x60, 0x96, 0x00, 0x97, 0x44, 0x98, 0x6C, 0x99,
    0x00, 0x9A, 0x00, 0x9B, 0x5D, 0x9C, 0x20, 0x9D, 0x60, 0x9F, 0x60, 0xA0,
    0x00, 0xA1, 0x00, 0xA2, 0x00, 0xA3, 0x50, 0xA4, 0x00, 0xA5, 0x00, 0xA6,
    0x00, 0xA7, 0x00, 0xA8, 0x00, 0xA9, 0x00, 0xAA, 0x29, 0xAB, 0x00, 0xAC,
    0x20, 0xAD, 0x20, 0xAE, 0x00, 0xAF, 0x40, 0xF1, 0xB5, 0x00, 0xF9, 0x80,
    0x20, 0x81, 0x60, 0x82, 0x00, 0x83, 0x00, 0x84, 0x00, 0x85, 0x60, 0x86,
    0x20, 0x87, 0x00, 0x88, 0x76, 0x89, 0x00, 0x8A, 0x00, 0x8B, 0x00, 0x8F,
    0x40, 0x90, 0x60, 0x91, 0x52, 0x92, 0x42, 0x93, 0x7F, 0x94, 0x60, 0x95,
    0x60, 0x96, 0x00, 0x97, 0x2C, 0x98, 0x1B, 0x99, 0x00, 0x9A, 0x14, 0x9B,
    0x62, 0x9C, 0x40, 0x9D, 0x60, 0x9F, 0x20, 0xA0, 0x20, 0xA1, 0x20, 0xA2,
    0x00, 0xA3, 0x67, 0xA4, 0x00, 0xA5, 0x40, 0xA6, 0x30, 0xA7, 0x50, 0xA8,
    0x20, 0xA9, 0x00, 0xAA, 0x4F, 0xAB, 0x00, 0xAC, 0x29, 0xAD, 0x20, 0xAE,
    0x7F, 0xAF, 0x40, 0xF9, 0xB5, 0x00, 0xF1, 0x9E, 0x5C, 0xF9, 0x9E, 0x74,
    0xF4, 0xB0, 0x01, 0xF4, 0xB7, 0x00, 0xF4, 0xB8, 0x00, 0xB9, 0x00, 0xBA,
    0x00, 0x8C, 0x00, 0x8D, 0x00, 0x8E, 0x00, 0xB0, 0x01, 0xF1, 0xB6, 0x7F,
    0xF9, 0xB6, 0x7F, 0xF1, 0xBB, 0x00, 0xF9, 0xBB, 0x00, 0xF1, 0xBD, 0x00,
    0xB4, 0x51, 0xBE, 0x51, 0xF9, 0xBD, 0x00, 0xB4, 0x32, 0xBE, 0x32, 0xF9,
    0xB4, 0x32, 0xBE, 0x32, 0xF1, 0xB4, 0x51, 0xBE, 0x51, 0xF9, 0xB5, 0x00,
    0xF1, 0xB5, 0x00, 0xF5, 0xC0, 0x00, 0xF4, 0x9E, 0x00, 0xA6, 0x00, 0xA7,
    0x00, 0xAB, 0x00, 0xAC, 0x00, 0xF1, 0x80, 0x60, 0x81, 0x20, 0x82, 0x7F,
    0x83, 0x00, 0x84, 0x7F, 0x85, 0x60, 0x86, 0x20, 0x87, 0x60, 0x88, 0x5C,
    0x89, 0x4D, 0x8A, 0x00, 0x8B, 0x00, 0x8F, 0x00, 0x90, 0x60, 0x91, 0x00,
    0x92, 0x7F, 0x93, 0x00, 0x94, 0x00, 0x95, 0x60, 0x96, 0x00, 0x97, 0x44,
    0x98, 0x6C, 0x99, 0x00, 0x9A, 0x00, 0x9B, 0x5D, 0x9C, 0x20, 0x9D, 0x60,
    0x9F, 0x60, 0xA0, 0x00, 0xA1, 0x00, 0xA2, 0x00, 0xA3, 0x50, 0xA4, 0x00,
    0xA5, 0x00, 0xA6, 0x00, 0xA7, 0x00, 0xA8, 0x00, 0xA9, 0x00, 0xAA, 0x29,
    0xAB, 0x00, 0xAC, 0x20, 0xAD, 0x20, 0xAE, 0x00, 0xAF, 0x40, 0xF1, 0xB5,
    0x00, 0xF9, 0x80, 0x20, 0x81, 0x60, 0x82, 0x00, 0x83, 0x00, 0x84, 0x00,
    0x85, 0x60, 0x86, 0x20, 0x87, 0x00, 0x88, 0x76, 0x89, 0x00, 0x8A, 0x00,
    0x8B, 0x00, 0x8F, 0x40, 0x90, 0x60, 0x91, 0x52, 0x92, 0x42, 0x93, 0x7F,
    0x94, 0x60, 0x95, 0x60, 0x96, 0x00, 0x97, 0x2C, 0x98, 0x1B, 0x99, 0x00,
    0x9A, 0x14, 0x9B, 0x62, 0x9C, 0x40, 0x9D, 0x60, 0x9F, 0x20, 0xA0, 0x20,
    0xA1, 0x20, 0xA2, 0x00, 0xA3, 0x67, 0xA4, 0x00, 0xA5, 0x40, 0xA6, 0x30,
    0xA7, 0x50, 0xA8, 0x20, 0xA9, 0x00, 0xAA, 0x4F, 0xAB, 0x00, 0xAC, 0x29,
    0xAD, 0x20, 0xAE, 0x7F, 0xAF, 0x40, 0xF9, 0xB5, 0x00, 0xF1, 0x9E, 0x5C,
    0xF9, 0x9E, 0x74, 0xF4, 0xB0, 0x01, 0xF4, 0xB7, 0x00, 0xF4, 0xB8, 0x00,
    0xB9, 0x00, 0xBA, 0x00, 0x8C, 0x00, 0x8D, 0x00, 0x8E, 0x00, 0xB0, 0x01,
    0xF1, 0xB6, 0x7F, 0xF9, 0xB6, 0x7F, 0xF1, 0xBB, 0x00, 0xF9, 0xBB, 0x00,
    0xF1, 0xBD, 0x00, 0xB4, 0x51, 0xBE, 0x51, 0xF9, 0xBD, 0x00, 0xB4, 0x32,
    0xBE, 0x32, 0xF9, 0xB4, 0x32, 0xBE, 0x32, 0xF1, 0xB4, 0x51, 0xBE, 0x51,
    0xF9, 0xB5, 0x00, 0xF1, 0xB5, 0x00};

unsigned char noteOn[] = {0xF9, 0xC0, 0x48, 0x74, 0xF1, 0xC0, 0x48, 0x74};
unsigned char noteOff[] = {0xF9, 0xD0, 0x48, 0x74, 0xF1, 0xD0, 0x48, 0x74};

int main(int argc, char *argv[]) {
  if (SDL_Init(SDL_INIT_VIDEO) != 0) {
    return 1;
  }

  // Decide GL+GLSL versions
#if defined(IMGUI_IMPL_OPENGL_ES2)
  // GL ES 2.0 + GLSL 100
  const char *glsl_version = "#version 100";
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_FLAGS, 0);
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_ES);
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 2);
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 0);
#elif defined(__APPLE__)
  // GL 3.2 Core + GLSL 150
  const char *glsl_version = "#version 150";
  SDL_GL_SetAttribute(
      SDL_GL_CONTEXT_FLAGS,
      SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG); // Always required on Mac
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 2);
#else
  // GL 3.0 + GLSL 130
  const char *glsl_version = "#version 130";
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_FLAGS, 0);
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 0);
#endif

  // From 2.0.18: Enable native IME.
#ifdef SDL_HINT_IME_SHOW_UI
  SDL_SetHint(SDL_HINT_IME_SHOW_UI, "1");
#endif

  // Create window with graphics context
  SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
  SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);
  SDL_GL_SetAttribute(SDL_GL_STENCIL_SIZE, 8);
  SDL_WindowFlags window_flags =
      (SDL_WindowFlags)(SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE |
                        SDL_WINDOW_ALLOW_HIGHDPI);
  SDL_Window *window = SDL_CreateWindow(
      "Dear ImGui SDL2+OpenGL3 example", SDL_WINDOWPOS_CENTERED,
      SDL_WINDOWPOS_CENTERED, 1280, 720, window_flags);
  SDL_GLContext gl_context = SDL_GL_CreateContext(window);
  SDL_GL_MakeCurrent(window, gl_context);
  SDL_GL_SetSwapInterval(1); // Enable vsync

  // Setup Dear ImGui context
  IMGUI_CHECKVERSION();
  ImGui::CreateContext();
  ImGuiIO &io = ImGui::GetIO();
  (void)io;
  io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;

  // Setup Dear ImGui style
  ImGui::StyleColorsDark();
  // ImGui::StyleColorsLight();

  // Setup Platform/Renderer backends
  ImGui_ImplSDL2_InitForOpenGL(window, gl_context);
  ImGui_ImplOpenGL3_Init(glsl_version);

  int fd = open(argv[1], O_RDWR | O_NOCTTY | O_NDELAY);
  if (fd == -1) {
    printf("Device cannot be opened.\n");
    exit(-1);
  }
  struct termios options;
  fcntl(fd, F_SETFL, FNDELAY);
  tcgetattr(fd, &options);          // Get the current options of the port
  bzero(&options, sizeof(options)); // Clear all the options
  // Configure the device : 8 bits, no parity, no control
  options.c_cflag |= (CLOCAL | CREAD | CS8);
  options.c_iflag |= (IGNPAR | IGNBRK);
  options.c_cc[VTIME] = 0; // Timer unused
  options.c_cc[VMIN] = 0;  // At least on character before satisfy reading
  tcsetattr(fd, TCSANOW, &options);

  speed_t baud = 31250;
  ioctl(fd, IOSSIOSPEED, &baud);

  write(fd, pianoPatch, sizeof(pianoPatch));

  Pm_Initialize();

  int in_id = Pm_CreateVirtualInput("MKS-70", NULL, NULL);
  int out_id = Pm_CreateVirtualOutput("MKS-70", NULL, NULL);

  PmEvent buffer[1];
  PmStream *out;
  PmStream *in;
  Pm_OpenInput(&in, in_id, NULL, 0, NULL, NULL);
  Pm_OpenOutput(&out, out_id, NULL, OUTPUT_BUFFER_SIZE, TIME_PROC, TIME_INFO,
                0);
  printf("Created/Opened input %d and output %d\n", in_id, out_id);
  Pm_SetFilter(in, PM_FILT_ACTIVE | PM_FILT_CLOCK | PM_FILT_SYSEX);

  // Empty the buffer, just in case anything got through
  while (Pm_Poll(in)) {
    Pm_Read(in, buffer, 1);
  }

  bool show_demo_window = true;
  bool show_another_window = false;
  ImVec4 clear_color = ImVec4(0.45f, 0.55f, 0.60f, 1.00f);

  bool done = false;
  while (!done) {
    // Poll and handle events (inputs, window resize, etc.)
    // You can read the io.WantCaptureMouse, io.WantCaptureKeyboard flags to
    // tell if dear imgui wants to use your inputs.
    // - When io.WantCaptureMouse is true, do not dispatch mouse input data to
    // your main application, or clear/overwrite your copy of the mouse data.
    // - When io.WantCaptureKeyboard is true, do not dispatch keyboard input
    // data to your main application, or clear/overwrite your copy of the
    // keyboard data. Generally you may always pass all inputs to dear imgui,
    // and hide them from your application based on those two flags.
    SDL_Event event;
    while (SDL_PollEvent(&event)) {
      ImGui_ImplSDL2_ProcessEvent(&event);
      if (event.type == SDL_QUIT)
        done = true;
      if (event.type == SDL_WINDOWEVENT &&
          event.window.event == SDL_WINDOWEVENT_CLOSE &&
          event.window.windowID == SDL_GetWindowID(window))
        done = true;
    }

    // Start the Dear ImGui frame
    ImGui_ImplOpenGL3_NewFrame();
    ImGui_ImplSDL2_NewFrame();
    ImGui::NewFrame();

    // 1. Show the big demo window (Most of the sample code is in
    // ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear
    // ImGui!).
    if (show_demo_window)
      ImGui::ShowDemoWindow(&show_demo_window);

    // 2. Show a simple window that we create ourselves. We use a Begin/End pair
    // to create a named window.
    {
      static float f = 0.0f;
      static int counter = 0;

      ImGui::Begin("Hello, world!"); // Create a window called "Hello, world!"
                                     // and append into it.

      ImGui::Text("This is some useful text."); // Display some text (you can
                                                // use a format strings too)
      ImGui::Checkbox(
          "Demo Window",
          &show_demo_window); // Edit bools storing our window open/close state
      ImGui::Checkbox("Another Window", &show_another_window);

      ImGui::SliderFloat("float", &f, 0.0f,
                         1.0f); // Edit 1 float using a slider from 0.0f to 1.0f
      ImGui::ColorEdit3(
          "clear color",
          (float *)&clear_color); // Edit 3 floats representing a color

      if (ImGui::Button("Button")) // Buttons return true when clicked (most
                                   // widgets return true when edited/activated)
        counter++;
      ImGui::SameLine();
      ImGui::Text("counter = %d", counter);

      ImGui::Text("Application average %.3f ms/frame (%.1f FPS)",
                  1000.0f / io.Framerate, io.Framerate);
      ImGui::End();
    }

    // 3. Show another simple window.
    if (show_another_window) {
      ImGui::Begin(
          "Another Window",
          &show_another_window); // Pass a pointer to our bool variable (the
                                 // window will have a closing button that will
                                 // clear the bool when clicked)
      ImGui::Text("Hello from another window!");
      if (ImGui::Button("Close Me"))
        show_another_window = false;
      ImGui::End();
    }

    // Rendering
    ImGui::Render();
    glViewport(0, 0, (int)io.DisplaySize.x, (int)io.DisplaySize.y);
    glClearColor(clear_color.x * clear_color.w, clear_color.y * clear_color.w,
                 clear_color.z * clear_color.w, clear_color.w);
    glClear(GL_COLOR_BUFFER_BIT);
    ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
    SDL_GL_SwapWindow(window);

    // Read from virtual port
    int length = Pm_Read(in, buffer, 1);
    if (length > 0) {
      for (size_t i = 0; i < length; i++) {
        printf("Got message: time %ld, %2lx %2lx %2lx\n",
               (long)buffer[0].timestamp,
               (long)Pm_MessageStatus(buffer[0].message),
               (long)Pm_MessageData1(buffer[0].message),
               (long)Pm_MessageData2(buffer[0].message));

        if (Pm_MessageStatus(buffer[0].message) == 0x90) {
          noteOn[2] = Pm_MessageData1(buffer[0].message);
          noteOn[6] = Pm_MessageData1(buffer[0].message);
          noteOn[3] = Pm_MessageData2(buffer[0].message);
          noteOn[7] = Pm_MessageData2(buffer[0].message);
          write(fd, noteOn, sizeof(noteOn));
        } else if (Pm_MessageStatus(buffer[0].message) == 0x80) {
          noteOff[2] = Pm_MessageData1(buffer[0].message);
          noteOff[6] = Pm_MessageData1(buffer[0].message);
          noteOff[3] = Pm_MessageData2(buffer[0].message);
          noteOff[7] = Pm_MessageData2(buffer[0].message);
          write(fd, noteOff, sizeof(noteOff));
        }
      }
    }
  }

  // Cleanup
  ImGui_ImplOpenGL3_Shutdown();
  ImGui_ImplSDL2_Shutdown();
  ImGui::DestroyContext();

  SDL_GL_DeleteContext(gl_context);
  SDL_DestroyWindow(window);
  SDL_Quit();

  Pm_Terminate();

  return 0;
}
